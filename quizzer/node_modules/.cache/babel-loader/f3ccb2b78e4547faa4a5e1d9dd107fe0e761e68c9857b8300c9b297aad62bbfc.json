{"ast":null,"code":"var _jsxFileName = \"/Users/vepa/Desktop/Projet_PC3R/spotrend-quizzer/src/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizPage() {\n  _s();\n  const [question, setQuestion] = useState(null);\n  const [selectedChoice, setSelectedChoice] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [isQuizComplete, setIsQuizComplete] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!isQuizComplete && questionCount < 10) {\n      fetchQuestion();\n    } else if (isQuizComplete) {\n      sendScoreToServer(score);\n    }\n  }, [questionCount, isQuizComplete]);\n  const fetchQuestion = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/generate-question');\n      const data = await response.json();\n      setQuestion(data);\n      setSelectedChoice(null); // Réinitialiser pour la question suivante\n    } catch (error) {\n      console.error('Problème lors de la récupération de la question', error);\n    }\n  };\n  const handleChoice = choice => {\n    setSelectedChoice(choice);\n    if (choice === question.answer) {\n      setScore(prevScore => prevScore + 1);\n    }\n  };\n  const handleNextQuestion = () => {\n    if (questionCount < 9) {\n      setQuestionCount(prevCount => prevCount + 1);\n    } else {\n      setIsQuizComplete(true);\n    }\n    setSelectedChoice(null); // Réinitialiser pour la question suivante\n  };\n  const getButtonClass = choice => {\n    if (selectedChoice === null) return \"choice-button\";\n    if (choice === question.answer) return \"choice-button correct\"; // Met en vert la réponse correcte\n    if (choice === selectedChoice) return \"choice-button incorrect\";\n    return \"choice-button\";\n  };\n  const sendScoreToServer = async finalScore => {\n    const token = localStorage.getItem('userToken');\n    try {\n      const response = await fetch('http://localhost:8080/finish-quizz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          score: finalScore\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de l\\'envoi du score');\n      }\n      // Redirection vers ResultPage avec le score comme état\n      navigate('/results', {\n        state: {\n          score: finalScore\n        }\n      });\n    } catch (error) {\n      console.error('Erreur lors de l\\'envoi du score', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SpotTrend Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), isQuizComplete ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-complete\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz Termin\\xE9!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Votre score final: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : question && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-title\",\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choices-container\",\n        children: question.choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChoice(choice),\n          className: getButtonClass(choice),\n          disabled: selectedChoice !== null,\n          children: choice\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Question: \", questionCount + 1, \" / 10\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), selectedChoice !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-question-button\",\n        onClick: handleNextQuestion,\n        children: \"Question Suivante\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizPage, \"pHgsLscHCWlgCahRvMIqTke+rEE=\", false, function () {\n  return [useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","QuizPage","_s","question","setQuestion","selectedChoice","setSelectedChoice","score","setScore","questionCount","setQuestionCount","isQuizComplete","setIsQuizComplete","navigate","fetchQuestion","sendScoreToServer","response","fetch","data","json","error","console","handleChoice","choice","answer","prevScore","handleNextQuestion","prevCount","getButtonClass","finalScore","token","localStorage","getItem","method","headers","body","JSON","stringify","ok","Error","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","choices","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/vepa/Desktop/Projet_PC3R/spotrend-quizzer/src/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction QuizPage() {\n  const [question, setQuestion] = useState(null);\n  const [selectedChoice, setSelectedChoice] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [isQuizComplete, setIsQuizComplete] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!isQuizComplete && questionCount < 10) {\n      fetchQuestion();\n    } else if (isQuizComplete) {\n      sendScoreToServer(score);\n    }\n  }, [questionCount, isQuizComplete]); \n\n  const fetchQuestion = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/generate-question');\n      const data = await response.json();\n      setQuestion(data);\n      setSelectedChoice(null); // Réinitialiser pour la question suivante\n    } catch (error) {\n      console.error('Problème lors de la récupération de la question', error);\n    }\n  };\n\n  const handleChoice = (choice) => {\n    setSelectedChoice(choice);\n    if (choice === question.answer) { \n      setScore((prevScore) => prevScore + 1);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    if (questionCount < 9) {\n      setQuestionCount((prevCount) => prevCount + 1);\n    } else {\n      setIsQuizComplete(true);\n    }\n    setSelectedChoice(null); // Réinitialiser pour la question suivante\n  };\n\n  const getButtonClass = (choice) => {\n    if (selectedChoice === null) return \"choice-button\";\n    if (choice === question.answer) return \"choice-button correct\"; // Met en vert la réponse correcte\n    if (choice === selectedChoice) return \"choice-button incorrect\";\n    return \"choice-button\";\n  };\n\n  const sendScoreToServer = async (finalScore) => {\n    const token = localStorage.getItem('userToken');\n    try {\n      const response = await fetch('http://localhost:8080/finish-quizz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ score: finalScore })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de l\\'envoi du score');\n      }\n      // Redirection vers ResultPage avec le score comme état\n      navigate('/results', { state: { score: finalScore } });\n    } catch (error) {\n      console.error('Erreur lors de l\\'envoi du score', error);\n    }\n  };\n\n  return (\n    <div className=\"quiz-page\">\n      <h1>SpotTrend Quiz</h1>\n      {isQuizComplete ? (\n        <div className=\"quiz-complete\">\n          <h2>Quiz Terminé!</h2>\n          <p>Votre score final: {score}</p>\n        </div>\n      ) : (\n        question && (\n          <div className=\"question-container\">\n            <p className=\"question-title\">{question.question}</p>\n            <div className=\"choices-container\">\n              {question.choices.map((choice, index) => (\n                <button\n                  key={index}\n                  onClick={() => handleChoice(choice)}\n                  className={getButtonClass(choice)}\n                  disabled={selectedChoice !== null}\n                >\n                  {choice}\n                </button>\n              ))}\n            </div>\n            <p>Question: {questionCount + 1} / 10</p>\n            <p>Score: {score}</p>\n            {selectedChoice !== null && (\n              <button className=\"next-question-button\" onClick={handleNextQuestion}>\n                Question Suivante\n              </button>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n}\n\nexport default QuizPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}